version: '3.4'

services:

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:      
      - elk
  
    # Container to monitor services running inside other containers
  metricbeat:
    build: ./metricbeat
    restart: unless-stopped
    container_name: metricbeat-metricbeat-services
    command: -e
    environment:
      - "WAIT_FOR_HOSTS=elasticsearch:9200 kibana:5601"
      - "HOST_ELASTICSEARCH=elasticsearch:9200"
      - "HOST_KIBANA=kibana:5601"
    depends_on:
      - elasticsearch
      - logstash
      - kibana
    networks:
      - elk

  # metricbeat:
  #   build: metricbeat/.
  #   restart: unless-stopped
  #   volumes:
  #     - ./metricbeat/metricbeat.yml:/metricbeat/metricbeat.yml
  #   depends_on:
  #     - elasticsearch
  #     - kibana
  #     - logstash
  #   environment:
  #     - HOST_ELASTICSEARCH=http://elasticsearch:9200
  #     - HOST_KIBANA=http://elasticsearch:5601
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #   networks: 
  #     - elk
  # zookeeper:
  #   image: confluent/zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     zk_id: "1"
  #   networks:
  #     - elk

  # kafka:
  #   image: confluent/kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #   networks:
  #     - elk
  zookeeper:
    build: ./zookeeper
    command:
      - "start-foreground"
    ports:
      - "2181:2181"
    networks:
      - elk

  kafka:
    image: wurstmeister/kafka
    links:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=192.168.99.100
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_CREATE_TOPICS=customer:1:1,audit:1:1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - JMX_PORT=9999
    networks:
      - elk

  kafka-jmx-exporter:
    build: ./prometheus-jmx-exporter
    ports:
      - "8080:8080"
    # links:
    #   - kafka
    environment:
      - JMX_PORT=9999
      - JMX_HOST=kafka
      - HTTP_PORT=8080
      - JMX_EXPORTER_CONFIG_FILE=kafka.yml
    networks:
      - elk

  prometheus:
    ports:
      - 9090:9090/tcp
    image: prom/prometheus:0.18.0
    volumes:
      - ./mount/prometheus:/etc/prometheus
    # links:
    #   - kafka-jmx-exporter
    networks:
      - elk

  grafana:
    image: grafana/grafana:3.0.1
    ports:
      - 3000:3000/tcp
    # links:
    #   - prometheus
    volumes:
      - "graf-db:/var/lib/grafana"
    networks:
      - elk

  graf-db:
    command:
      - cat
    image: infinityworks/graf-db:08
    # links:
    #   - prometheus
    volumes:
      - "graf-db:/var/lib/grafana/"
    networks:
      - elk

volumes:
  graf-db:

networks:
  elk:
    driver: bridge
