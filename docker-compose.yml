version: '3.4'

services:

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:      
      - elk
  
    # Container to monitor services running inside other containers
  metricbeat:
    build:
      context: metricbeat/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: unless-stopped
    container_name: metricbeat-metricbeat-services
    command: -e
    environment:
      - "WAIT_FOR_HOSTS=elasticsearch:9200 kibana:5601"
      - "HOST_ELASTICSEARCH=elasticsearch:9200"
      - "HOST_KIBANA=kibana:5601"
    depends_on:
      - elasticsearch
      - logstash
      - kibana
    networks:
      - elk

  kafka:
    image: spotify/kafka
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - elk

  kafka-jmx-exporter:
    build: ./prometheus-jmx-exporter
    ports:
      - "8080:8080"
    # links:
    #   - kafka
    environment:
      - JMX_PORT=9999
      - JMX_HOST=kafka
      - HTTP_PORT=8080
      - JMX_EXPORTER_CONFIG_FILE=kafka.yml
    networks:
      - elk

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9091:9090
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role==manager
    networks:
      - elk

  grafana:
    image: grafana/grafana:3.0.1
    depends_on:
      - prometheus
    ports:
      - 3001:3000/tcp
    links:
      - prometheus
    volumes:
      - "graf-db:/var/lib/grafana"
    restart: unless-stopped
    networks:
      - elk

  graf-db:
    command:
      - cat
    image: infinityworks/graf-db:08
    links:
      - prometheus
    volumes:
      - "graf-db:/var/lib/grafana/"
    networks:
      - elk

networks:
  elk:
    driver: bridge
volumes:
    prometheus_data: {}
    graf-db: